// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test orchestration construct 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926ArtifactHashDF8D22EC": Object {
      "Description": "Artifact hash for asset \\"02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926\\"",
      "Type": "String",
    },
    "AssetParameters02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926S3Bucket596D8E57": Object {
      "Description": "S3 bucket for asset \\"02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926\\"",
      "Type": "String",
    },
    "AssetParameters02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926S3VersionKey20C99F97": Object {
      "Description": "S3 key for asset version \\"02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926\\"",
      "Type": "String",
    },
    "AssetParametersacd01d4f2e0acf02e2195c3ef74aeba60005b9c715388d70a25cfe37a4b48974ArtifactHash6979B94C": Object {
      "Description": "Artifact hash for asset \\"acd01d4f2e0acf02e2195c3ef74aeba60005b9c715388d70a25cfe37a4b48974\\"",
      "Type": "String",
    },
    "AssetParametersacd01d4f2e0acf02e2195c3ef74aeba60005b9c715388d70a25cfe37a4b48974S3BucketF728F7F4": Object {
      "Description": "S3 bucket for asset \\"acd01d4f2e0acf02e2195c3ef74aeba60005b9c715388d70a25cfe37a4b48974\\"",
      "Type": "String",
    },
    "AssetParametersacd01d4f2e0acf02e2195c3ef74aeba60005b9c715388d70a25cfe37a4b48974S3VersionKeyAA48D62E": Object {
      "Description": "S3 key for asset version \\"acd01d4f2e0acf02e2195c3ef74aeba60005b9c715388d70a25cfe37a4b48974\\"",
      "Type": "String",
    },
    "AssetParametersb7fa070d5e1a197357628c2d0608a011e606c7efc5179fd9cec40aea4d481bd8ArtifactHashAC91932A": Object {
      "Description": "Artifact hash for asset \\"b7fa070d5e1a197357628c2d0608a011e606c7efc5179fd9cec40aea4d481bd8\\"",
      "Type": "String",
    },
    "AssetParametersb7fa070d5e1a197357628c2d0608a011e606c7efc5179fd9cec40aea4d481bd8S3Bucket14210AD2": Object {
      "Description": "S3 bucket for asset \\"b7fa070d5e1a197357628c2d0608a011e606c7efc5179fd9cec40aea4d481bd8\\"",
      "Type": "String",
    },
    "AssetParametersb7fa070d5e1a197357628c2d0608a011e606c7efc5179fd9cec40aea4d481bd8S3VersionKey8F13A64B": Object {
      "Description": "S3 key for asset version \\"b7fa070d5e1a197357628c2d0608a011e606c7efc5179fd9cec40aea4d481bd8\\"",
      "Type": "String",
    },
    "AssetParameterscc5a7541c3f0e8b79f135e3a8ce2ade9b1ad7773a4e7d0ac9e0ac4142c870827ArtifactHashFBA689D7": Object {
      "Description": "Artifact hash for asset \\"cc5a7541c3f0e8b79f135e3a8ce2ade9b1ad7773a4e7d0ac9e0ac4142c870827\\"",
      "Type": "String",
    },
    "AssetParameterscc5a7541c3f0e8b79f135e3a8ce2ade9b1ad7773a4e7d0ac9e0ac4142c870827S3BucketC96C488B": Object {
      "Description": "S3 bucket for asset \\"cc5a7541c3f0e8b79f135e3a8ce2ade9b1ad7773a4e7d0ac9e0ac4142c870827\\"",
      "Type": "String",
    },
    "AssetParameterscc5a7541c3f0e8b79f135e3a8ce2ade9b1ad7773a4e7d0ac9e0ac4142c870827S3VersionKey18ABE81D": Object {
      "Description": "S3 key for asset version \\"cc5a7541c3f0e8b79f135e3a8ce2ade9b1ad7773a4e7d0ac9e0ac4142c870827\\"",
      "Type": "String",
    },
    "AssetParametersd56c3099e4e60d9d1a202e4b121d2b1294e29acd329c59de6e16e9e95ae6b82fArtifactHash25A33385": Object {
      "Description": "Artifact hash for asset \\"d56c3099e4e60d9d1a202e4b121d2b1294e29acd329c59de6e16e9e95ae6b82f\\"",
      "Type": "String",
    },
    "AssetParametersd56c3099e4e60d9d1a202e4b121d2b1294e29acd329c59de6e16e9e95ae6b82fS3Bucket74BBF58E": Object {
      "Description": "S3 bucket for asset \\"d56c3099e4e60d9d1a202e4b121d2b1294e29acd329c59de6e16e9e95ae6b82f\\"",
      "Type": "String",
    },
    "AssetParametersd56c3099e4e60d9d1a202e4b121d2b1294e29acd329c59de6e16e9e95ae6b82fS3VersionKey5869DD4C": Object {
      "Description": "S3 key for asset version \\"d56c3099e4e60d9d1a202e4b121d2b1294e29acd329c59de6e16e9e95ae6b82f\\"",
      "Type": "String",
    },
    "AssetParameterse589d87abc8c6481eeb10fcba799165c929cbdc5dc76f82ef863098d17f50283ArtifactHash9BE75073": Object {
      "Description": "Artifact hash for asset \\"e589d87abc8c6481eeb10fcba799165c929cbdc5dc76f82ef863098d17f50283\\"",
      "Type": "String",
    },
    "AssetParameterse589d87abc8c6481eeb10fcba799165c929cbdc5dc76f82ef863098d17f50283S3Bucket720825A0": Object {
      "Description": "S3 bucket for asset \\"e589d87abc8c6481eeb10fcba799165c929cbdc5dc76f82ef863098d17f50283\\"",
      "Type": "String",
    },
    "AssetParameterse589d87abc8c6481eeb10fcba799165c929cbdc5dc76f82ef863098d17f50283S3VersionKeyFB2CADAD": Object {
      "Description": "S3 key for asset version \\"e589d87abc8c6481eeb10fcba799165c929cbdc5dc76f82ef863098d17f50283\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AccessLogD598EBE9": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructDetectLangLambdaStateMachineTaskD76F5818": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "State machine resource not available, hence defaulting to \\"*\\"",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "states:SendTaskSuccess",
                "states:sendTaskFailure",
                "states:SendTaskHeartbeat",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructDetectLangLambdaStateMachineTaskD76F5818",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructDetectLangTaskLambdaFunctionServiceRole190A36AD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructDetectLangTaskLambdaFunctionA1732E57": Object {
      "DependsOn": Array [
        "OrchestrationConstructDetectLangTaskLambdaFunctionServiceRoleDefaultPolicy2E7A77EC",
        "OrchestrationConstructDetectLangTaskLambdaFunctionServiceRole190A36AD",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersacd01d4f2e0acf02e2195c3ef74aeba60005b9c715388d70a25cfe37a4b48974S3BucketF728F7F4",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersacd01d4f2e0acf02e2195c3ef74aeba60005b9c715388d70a25cfe37a4b48974S3VersionKeyAA48D62E",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersacd01d4f2e0acf02e2195c3ef74aeba60005b9c715388d70a25cfe37a4b48974S3VersionKeyAA48D62E",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DEFAULT_LANGAUGE": "en",
          },
        },
        "Handler": "index.handler",
        "ReservedConcurrentExecutions": 15,
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructDetectLangTaskLambdaFunctionServiceRole190A36AD",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructDetectLangTaskLambdaFunctionServiceRole190A36AD": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructDetectLangTaskLambdaFunctionServiceRoleDefaultPolicy2E7A77EC": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructDetectLangTaskqueue7F10D52E",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructDetectLangTaskLambdaFunctionServiceRoleDefaultPolicy2E7A77EC",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructDetectLangTaskLambdaFunctionServiceRole190A36AD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructDetectLangTaskLambdaFunctionSqsEventSourceOrchestrationConstructDetectLangTaskqueue72BE2B80C7EA3FD7": Object {
      "Properties": Object {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructDetectLangTaskqueue7F10D52E",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "OrchestrationConstructDetectLangTaskLambdaFunctionA1732E57",
        },
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "OrchestrationConstructDetectLangTaskdeadLetterQueueE78FDBEF": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestrationConstructDetectLangTaskdeadLetterQueuePolicyEB453143": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructDetectLangTaskdeadLetterQueueE78FDBEF",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructDetectLangTaskdeadLetterQueueE78FDBEF",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "OrchestrationConstructDetectLangTaskdeadLetterQueueE78FDBEF",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "OrchestrationConstructDetectLangTaskqueue7F10D52E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructDetectLangTaskdeadLetterQueueE78FDBEF",
              "Arn",
            ],
          },
          "maxReceiveCount": 15,
        },
        "VisibilityTimeout": 3600,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestrationConstructDetectLangTaskqueuePolicyD611F169": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructDetectLangTaskqueue7F10D52E",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructDetectLangTaskqueue7F10D52E",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "OrchestrationConstructDetectLangTaskqueue7F10D52E",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "OrchestrationConstructImageAnalysisLambdaStateMachineTask2428A01B": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "State machine resource not available, hence defaulting to \\"*\\"",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "states:SendTaskSuccess",
                "states:sendTaskFailure",
                "states:SendTaskHeartbeat",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructImageAnalysisLambdaStateMachineTask2428A01B",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructImageAnalysisTaskLambdaFunctionServiceRole9751CC46",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructImageAnalysisTaskLambdaFunction683EE119": Object {
      "DependsOn": Array [
        "OrchestrationConstructImageAnalysisTaskLambdaFunctionServiceRoleDefaultPolicy001FDAC9",
        "OrchestrationConstructImageAnalysisTaskLambdaFunctionServiceRole9751CC46",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926S3Bucket596D8E57",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926S3VersionKey20C99F97",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926S3VersionKey20C99F97",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "S3_BUCKET_NAME": Object {
              "Ref": "OrchestrationConstructImageBucketS3Bucket20418E23",
            },
          },
        },
        "Handler": "index.handler",
        "ReservedConcurrentExecutions": 15,
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructImageAnalysisTaskLambdaFunctionServiceRole9751CC46",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructImageAnalysisTaskLambdaFunctionServiceRole9751CC46": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructImageAnalysisTaskLambdaFunctionServiceRoleDefaultPolicy001FDAC9": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructImageAnalysisTaskqueue25D79D1F",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructImageBucketS3Bucket20418E23",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructImageBucketS3Bucket20418E23",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructImageAnalysisTaskLambdaFunctionServiceRoleDefaultPolicy001FDAC9",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructImageAnalysisTaskLambdaFunctionServiceRole9751CC46",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructImageAnalysisTaskLambdaFunctionSqsEventSourceOrchestrationConstructImageAnalysisTaskqueue3AE3A2A312A31520": Object {
      "Properties": Object {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructImageAnalysisTaskqueue25D79D1F",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "OrchestrationConstructImageAnalysisTaskLambdaFunction683EE119",
        },
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "OrchestrationConstructImageAnalysisTaskdeadLetterQueue1BC38F55": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestrationConstructImageAnalysisTaskdeadLetterQueuePolicy14893B98": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructImageAnalysisTaskdeadLetterQueue1BC38F55",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructImageAnalysisTaskdeadLetterQueue1BC38F55",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "OrchestrationConstructImageAnalysisTaskdeadLetterQueue1BC38F55",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "OrchestrationConstructImageAnalysisTaskqueue25D79D1F": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructImageAnalysisTaskdeadLetterQueue1BC38F55",
              "Arn",
            ],
          },
          "maxReceiveCount": 15,
        },
        "VisibilityTimeout": 3600,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestrationConstructImageAnalysisTaskqueuePolicyA1A79F51": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructImageAnalysisTaskqueue25D79D1F",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructImageAnalysisTaskqueue25D79D1F",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "OrchestrationConstructImageAnalysisTaskqueue25D79D1F",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "OrchestrationConstructImageBucketS3Bucket20418E23": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "AccessLogD598EBE9",
          },
          "LogFilePrefix": "OrchestrationConstruct/",
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructImageBucketS3BucketPolicy6A71B078": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "OrchestrationConstructImageBucketS3Bucket20418E23",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "OrchestrationConstructImageBucketS3Bucket20418E23",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
            Object {
              "Action": Array [
                "s3:List*",
                "s3:Get*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "rekognition.amazonaws.com",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructImageBucketS3Bucket20418E23",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructImageBucketS3Bucket20418E23",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "OrchestrationConstructLabelsRekAnalyzeC2C4DA03": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Rekognition services. The Rekognition services do not have a resource arn.
                        This permission is retricted to the lambda function responsible for accessing the Amazon Rekognition service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "rekognition:detectModerationLabels",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructLabelsRekAnalyzeC2C4DA03",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructModerationLabelsTaskLambdaFunctionServiceRole93530097",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructLambdaComprehendPolicy140F9123": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Comprehend services.
                    The comprehend services not have a resource arn. This permission is retricted to
                    the lambda function responsible for accessing the Amazon Comprehend service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "comprehend:DetectSentiment",
                "comprehend:DetectEntities",
                "comprehend:DetectKeyPhrases",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructLambdaComprehendPolicy140F9123",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTextAnalysisTaskLambdaFunctionServiceRoleF3C02291",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructLambdaDetectLangPolicy011B8203": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Comprehend services.
                        The comprehend services not have a resource arn. This permission is retricted to
                        the lambda function responsible for accessing the Amazon Comprehend service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "comprehend:DetectDominantLanguage",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructLambdaDetectLangPolicy011B8203",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructDetectLangTaskLambdaFunctionServiceRole190A36AD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructLambdaEventBusPolicy557A2842": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TestEventBus12626D66",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructLambdaEventBusPolicy557A2842",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructPublishEventsLambdaFunctionServiceRole4EA0B6AB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructModerationLabelsLambdaStateMachineTask677FB728": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "State machine resource not available, hence defaulting to \\"*\\"",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "states:SendTaskSuccess",
                "states:sendTaskFailure",
                "states:SendTaskHeartbeat",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructModerationLabelsLambdaStateMachineTask677FB728",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructModerationLabelsTaskLambdaFunctionServiceRole93530097",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructModerationLabelsTaskLambdaFunction5DCF7649": Object {
      "DependsOn": Array [
        "OrchestrationConstructModerationLabelsTaskLambdaFunctionServiceRoleDefaultPolicyB7910F2E",
        "OrchestrationConstructModerationLabelsTaskLambdaFunctionServiceRole93530097",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersb7fa070d5e1a197357628c2d0608a011e606c7efc5179fd9cec40aea4d481bd8S3Bucket14210AD2",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb7fa070d5e1a197357628c2d0608a011e606c7efc5179fd9cec40aea4d481bd8S3VersionKey8F13A64B",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersb7fa070d5e1a197357628c2d0608a011e606c7efc5179fd9cec40aea4d481bd8S3VersionKey8F13A64B",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "S3_BUCKET_NAME": Object {
              "Ref": "OrchestrationConstructImageBucketS3Bucket20418E23",
            },
          },
        },
        "Handler": "index.handler",
        "ReservedConcurrentExecutions": 15,
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructModerationLabelsTaskLambdaFunctionServiceRole93530097",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructModerationLabelsTaskLambdaFunctionServiceRole93530097": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructModerationLabelsTaskLambdaFunctionServiceRoleDefaultPolicyB7910F2E": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructModerationLabelsTaskqueueEFF25AE6",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructImageBucketS3Bucket20418E23",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructImageBucketS3Bucket20418E23",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructModerationLabelsTaskLambdaFunctionServiceRoleDefaultPolicyB7910F2E",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructModerationLabelsTaskLambdaFunctionServiceRole93530097",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructModerationLabelsTaskLambdaFunctionSqsEventSourceOrchestrationConstructModerationLabelsTaskqueue7A8DECA2C5E887A0": Object {
      "Properties": Object {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructModerationLabelsTaskqueueEFF25AE6",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "OrchestrationConstructModerationLabelsTaskLambdaFunction5DCF7649",
        },
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "OrchestrationConstructModerationLabelsTaskdeadLetterQueue2881344E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestrationConstructModerationLabelsTaskdeadLetterQueuePolicyDAB7CA39": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructModerationLabelsTaskdeadLetterQueue2881344E",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructModerationLabelsTaskdeadLetterQueue2881344E",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "OrchestrationConstructModerationLabelsTaskdeadLetterQueue2881344E",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "OrchestrationConstructModerationLabelsTaskqueueEFF25AE6": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructModerationLabelsTaskdeadLetterQueue2881344E",
              "Arn",
            ],
          },
          "maxReceiveCount": 15,
        },
        "VisibilityTimeout": 3600,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestrationConstructModerationLabelsTaskqueuePolicy33E02C08": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructModerationLabelsTaskqueueEFF25AE6",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructModerationLabelsTaskqueueEFF25AE6",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "OrchestrationConstructModerationLabelsTaskqueueEFF25AE6",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "OrchestrationConstructNEWSFEEDSRawForTAFirehoseRole5CC2062D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructNEWSFEEDSRawForTAFirehoseRoleDefaultPolicy6D304A4C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructS3Bucket2727DF68",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructS3Bucket2727DF68",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructNEWSFEEDSRawForTAFirehoseRoleDefaultPolicy6D304A4C",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructNEWSFEEDSRawForTAFirehoseRole5CC2062D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehose020698CF": Object {
      "DependsOn": Array [
        "OrchestrationConstructNEWSFEEDSRawForTAFirehoseRoleDefaultPolicy6D304A4C",
        "OrchestrationConstructNEWSFEEDSRawForTAFirehoseRole5CC2062D",
      ],
      "Properties": Object {
        "DeliveryStreamEncryptionConfigurationInput": Object {
          "KeyType": "AWS_OWNED_CMK",
        },
        "DeliveryStreamType": "DirectPut",
        "ExtendedS3DestinationConfiguration": Object {
          "BucketARN": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructS3Bucket2727DF68",
              "Arn",
            ],
          },
          "BufferingHints": Object {
            "IntervalInSeconds": 600,
            "SizeInMBs": 64,
          },
          "CloudWatchLoggingOptions": Object {
            "Enabled": true,
            "LogGroupName": Object {
              "Ref": "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehosefirehoseloggroup0BA96DC5",
            },
            "LogStreamName": Object {
              "Ref": "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehosefirehoseloggroupfirehoselogstreamAFB30C3B",
            },
          },
          "CompressionFormat": "UNCOMPRESSED",
          "EncryptionConfiguration": Object {
            "KMSEncryptionConfig": Object {
              "AWSKMSKeyARN": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":kms:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":alias/aws/s3",
                  ],
                ],
              },
            },
          },
          "Prefix": "newsfeeds/",
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructNEWSFEEDSRawForTAFirehoseRole5CC2062D",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehoseKinesisFirehosePolicy532D1803": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructS3Bucket2727DF68",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructS3Bucket2727DF68",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "logs:PutLogEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:",
                    Object {
                      "Ref": "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehosefirehoseloggroup0BA96DC5",
                    },
                    ":log-stream:",
                    Object {
                      "Ref": "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehosefirehoseloggroupfirehoselogstreamAFB30C3B",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehoseKinesisFirehosePolicy532D1803",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehoseKinesisFirehoseRoleDE2C9E27",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehoseKinesisFirehoseRoleDE2C9E27": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehosefirehoseloggroup0BA96DC5": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W86",
              "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely",
            },
            Object {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehosefirehoseloggroupfirehoselogstreamAFB30C3B": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LogGroupName": Object {
          "Ref": "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehosefirehoseloggroup0BA96DC5",
        },
      },
      "Type": "AWS::Logs::LogStream",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructPublishEventsLambdaFunctionE1376EA6": Object {
      "DependsOn": Array [
        "OrchestrationConstructPublishEventsLambdaFunctionServiceRoleDefaultPolicy320C691C",
        "OrchestrationConstructPublishEventsLambdaFunctionServiceRole4EA0B6AB",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameterscc5a7541c3f0e8b79f135e3a8ce2ade9b1ad7773a4e7d0ac9e0ac4142c870827S3BucketC96C488B",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameterscc5a7541c3f0e8b79f135e3a8ce2ade9b1ad7773a4e7d0ac9e0ac4142c870827S3VersionKey18ABE81D",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameterscc5a7541c3f0e8b79f135e3a8ce2ade9b1ad7773a4e7d0ac9e0ac4142c870827S3VersionKey18ABE81D",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENT_BUS_NAME": Object {
              "Ref": "TestEventBus12626D66",
            },
            "EVENT_NAMESPACE": "com.test.text",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructPublishEventsLambdaFunctionServiceRole4EA0B6AB",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructPublishEventsLambdaFunctionServiceRole4EA0B6AB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructPublishEventsLambdaFunctionServiceRoleDefaultPolicy320C691C": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructPublishEventsLambdaFunctionServiceRoleDefaultPolicy320C691C",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructPublishEventsLambdaFunctionServiceRole4EA0B6AB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructS3Bucket2727DF68": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "AccessLogD598EBE9",
          },
          "LogFilePrefix": "OrchestrationConstruct/",
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructS3BucketPolicy84DB4878": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "OrchestrationConstructS3Bucket2727DF68",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "OrchestrationConstructS3Bucket2727DF68",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "OrchestrationConstructStateMachineWorkflowEngineExecutionAbortedAlarmFA7A72F2": Object {
      "Properties": Object {
        "AlarmDescription": "Alarm for the number of executions that aborted exceeded the threshold of 1. ",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "StateMachineArn",
            "Value": Object {
              "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ExecutionsAborted",
        "Namespace": "AWS/States",
        "Period": 300,
        "Statistic": "Maximum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "OrchestrationConstructStateMachineWorkflowEngineExecutionFailedAlarm5512CA66": Object {
      "Properties": Object {
        "AlarmDescription": "Alarm for the number of executions that failed exceeded the threshold of 1. ",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "StateMachineArn",
            "Value": Object {
              "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ExecutionsFailed",
        "Namespace": "AWS/States",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "OrchestrationConstructStateMachineWorkflowEngineExecutionThrottledAlarmE931A386": Object {
      "Properties": Object {
        "AlarmDescription": "Alarm for the number of executions that throttled exceeded the threshold of 1. ",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": Array [
          Object {
            "Name": "StateMachineArn",
            "Value": Object {
              "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ExecutionThrottled",
        "Namespace": "AWS/States",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05": Object {
      "DependsOn": Array [
        "OrchestrationConstructStateMachineWorkflowEngineStateMachineRoleDefaultPolicy1C64BE7B",
        "OrchestrationConstructStateMachineWorkflowEngineStateMachineRole21FD21B0",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"LanguageAvailable?\\",\\"States\\":{\\"LanguageAvailable?\\":{\\"Type\\":\\"Choice\\",\\"Comment\\":\\"Check if the language is available\\",\\"InputPath\\":\\"$\\",\\"Choices\\":[{\\"Variable\\":\\"$.feed.lang\\",\\"IsPresent\\":false,\\"Next\\":\\"DetectLangSendMessage\\"},{\\"Variable\\":\\"$.feed.lang\\",\\"StringEquals\\":\\"und\\",\\"Next\\":\\"DetectLangSendMessage\\"},{\\"Variable\\":\\"$.feed.lang\\",\\"StringEquals\\":\\"None\\",\\"Next\\":\\"DetectLangSendMessage\\"}],\\"Default\\":\\"ImageAnalysisSendMessage\\"},\\"ImageAnalysisSendMessage\\":{\\"Next\\":\\"TextImageSplitProcess\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":3,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"ImageAnalysisTaskFailed\\"}],\\"Type\\":\\"Task\\",\\"TimeoutSeconds\\":86400,\\"HeartbeatSeconds\\":43200,\\"OutputPath\\":\\"$\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::sqs:sendMessage.waitForTaskToken\\",\\"Parameters\\":{\\"QueueUrl\\":\\"",
              Object {
                "Ref": "OrchestrationConstructImageAnalysisTaskqueue25D79D1F",
              },
              "\\",\\"MessageBody\\":{\\"input.$\\":\\"$\\",\\"taskToken.$\\":\\"$$.Task.Token\\"}}},\\"DetectLangSendMessage\\":{\\"Next\\":\\"ImageAnalysisSendMessage\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":3,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"DetectLangTaskFailed\\"}],\\"Type\\":\\"Task\\",\\"TimeoutSeconds\\":86400,\\"HeartbeatSeconds\\":43200,\\"OutputPath\\":\\"$\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::sqs:sendMessage.waitForTaskToken\\",\\"Parameters\\":{\\"QueueUrl\\":\\"",
              Object {
                "Ref": "OrchestrationConstructDetectLangTaskqueue7F10D52E",
              },
              "\\",\\"MessageBody\\":{\\"input.$\\":\\"$\\",\\"taskToken.$\\":\\"$$.Task.Token\\"}}},\\"DetectLangTaskFailed\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"$.cause\\"},\\"TextImageSplitProcess\\":{\\"Type\\":\\"Parallel\\",\\"Comment\\":\\"Parallely process Text and Image\\",\\"Next\\":\\"MergeJson\\",\\"InputPath\\":\\"$\\",\\"OutputPath\\":\\"$\\",\\"Branches\\":[{\\"StartAt\\":\\"ModerationLabelsSendMessage\\",\\"States\\":{\\"ModerationLabelsSendMessage\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":3,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"ModerationLabelsTaskFailed\\"}],\\"Type\\":\\"Task\\",\\"TimeoutSeconds\\":86400,\\"HeartbeatSeconds\\":43200,\\"OutputPath\\":\\"$.moderation_labels_in_imgs\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::sqs:sendMessage.waitForTaskToken\\",\\"Parameters\\":{\\"QueueUrl\\":\\"",
              Object {
                "Ref": "OrchestrationConstructModerationLabelsTaskqueueEFF25AE6",
              },
              "\\",\\"MessageBody\\":{\\"input.$\\":\\"$\\",\\"taskToken.$\\":\\"$$.Task.Token\\"}}},\\"ModerationLabelsTaskFailed\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"$.cause\\"}}},{\\"StartAt\\":\\"TranslateSendMessage\\",\\"States\\":{\\"TranslateSendMessage\\":{\\"Next\\":\\"TextAnalysisSendMessage\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":3,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"TranslateTaskFailed\\"}],\\"Type\\":\\"Task\\",\\"TimeoutSeconds\\":86400,\\"HeartbeatSeconds\\":43200,\\"OutputPath\\":\\"$\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::sqs:sendMessage.waitForTaskToken\\",\\"Parameters\\":{\\"QueueUrl\\":\\"",
              Object {
                "Ref": "OrchestrationConstructTranslateTaskqueueA95723A7",
              },
              "\\",\\"MessageBody\\":{\\"input.$\\":\\"$\\",\\"taskToken.$\\":\\"$$.Task.Token\\"}}},\\"TextAnalysisSendMessage\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":3,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"TextAnalysisTaskFailed\\"}],\\"Type\\":\\"Task\\",\\"TimeoutSeconds\\":86400,\\"HeartbeatSeconds\\":43200,\\"OutputPath\\":\\"$\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::sqs:sendMessage.waitForTaskToken\\",\\"Parameters\\":{\\"QueueUrl\\":\\"",
              Object {
                "Ref": "OrchestrationConstructTextAnalysisTaskqueueDF7049B0",
              },
              "\\",\\"MessageBody\\":{\\"input.$\\":\\"$\\",\\"taskToken.$\\":\\"$$.Task.Token\\"}}},\\"TextAnalysisTaskFailed\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"$.cause\\"},\\"TranslateTaskFailed\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"$.cause\\"}}}]},\\"MergeJson\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"account_name.$\\":\\"$[1].account_name\\",\\"platform.$\\":\\"$[1].platform\\",\\"search_query.$\\":\\"$[1].search_query\\",\\"feed.$\\":\\"$[1].feed\\",\\"Sentiment.$\\":\\"$[1].Sentiment\\",\\"SentimentScore.$\\":\\"$[1].SentimentScore\\",\\"KeyPhrases.$\\":\\"$[1].KeyPhrases\\",\\"Entities.$\\":\\"$[1].Entities\\",\\"moderation_labels_in_imgs.$\\":\\"$[0]\\",\\"text_in_images.$\\":\\"$[1].text_in_images\\"},\\"Next\\":\\"PublishEvents\\"},\\"PublishEvents\\":{\\"Next\\":\\"Success\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"PublishEventsTaskFailed\\"}],\\"Type\\":\\"Task\\",\\"HeartbeatSeconds\\":900,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructPublishEventsLambdaFunctionE1376EA6",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"Success\\":{\\"Type\\":\\"Succeed\\"},\\"PublishEventsTaskFailed\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"$.cause\\"},\\"ImageAnalysisTaskFailed\\":{\\"Type\\":\\"Fail\\",\\"Cause\\":\\"$.cause\\"}}}",
            ],
          ],
        },
        "LoggingConfiguration": Object {
          "Destinations": Array [
            Object {
              "CloudWatchLogsLogGroup": Object {
                "LogGroupArn": Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructStateMachineWorkflowEngineStateMachineLogGroup1C3FDDB1",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Level": "ERROR",
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructStateMachineWorkflowEngineStateMachineRole21FD21B0",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "OrchestrationConstructStateMachineWorkflowEngineStateMachineLogGroup1C3FDDB1": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W86",
              "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely",
            },
            Object {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)",
            },
          ],
        },
      },
      "Properties": Object {
        "LogGroupName": "/aws/vendedlogs/states/defaultworkflowenginestatemachinelogcc4dc486d166",
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructStateMachineWorkflowEngineStateMachineRole21FD21B0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "states.",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ".amazonaws.com",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructStateMachineWorkflowEngineStateMachineRoleDefaultPolicy1C64BE7B": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W76",
              "reason": "The statemachine invokes multiple lambdas and the policy is narrowed down to the specific lambda resource arn. Hence it has multiple policy statements resulting in a higher SPCM value",
            },
            Object {
              "id": "W12",
              "reason": "The \\"LogDelivery\\" actions do not support resource-level authorization",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructImageAnalysisTaskqueue25D79D1F",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructDetectLangTaskqueue7F10D52E",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructPublishEventsLambdaFunctionE1376EA6",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructModerationLabelsTaskqueueEFF25AE6",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTranslateTaskqueueA95723A7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sqs:SendMessage",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTextAnalysisTaskqueueDF7049B0",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructStateMachineWorkflowEngineStateMachineRoleDefaultPolicy1C64BE7B",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineRole21FD21B0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTWITTERRawForTAFirehoseRoleDefaultPolicy7D44D56C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructS3Bucket2727DF68",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructS3Bucket2727DF68",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTWITTERRawForTAFirehoseRoleDefaultPolicy7D44D56C",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTWITTERRawForTAFirehoseRoleEB1640D9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTWITTERRawForTAFirehoseRoleEB1640D9": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructTWITTERRawForTAKinesisFirehose7EC25066": Object {
      "DependsOn": Array [
        "OrchestrationConstructTWITTERRawForTAFirehoseRoleDefaultPolicy7D44D56C",
        "OrchestrationConstructTWITTERRawForTAFirehoseRoleEB1640D9",
      ],
      "Properties": Object {
        "DeliveryStreamEncryptionConfigurationInput": Object {
          "KeyType": "AWS_OWNED_CMK",
        },
        "DeliveryStreamType": "DirectPut",
        "ExtendedS3DestinationConfiguration": Object {
          "BucketARN": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructS3Bucket2727DF68",
              "Arn",
            ],
          },
          "BufferingHints": Object {
            "IntervalInSeconds": 600,
            "SizeInMBs": 64,
          },
          "CloudWatchLoggingOptions": Object {
            "Enabled": true,
            "LogGroupName": Object {
              "Ref": "OrchestrationConstructTWITTERRawForTAKinesisFirehosefirehoseloggroupD86A6349",
            },
            "LogStreamName": Object {
              "Ref": "OrchestrationConstructTWITTERRawForTAKinesisFirehosefirehoseloggroupfirehoselogstream70339ABC",
            },
          },
          "CompressionFormat": "UNCOMPRESSED",
          "EncryptionConfiguration": Object {
            "KMSEncryptionConfig": Object {
              "AWSKMSKeyARN": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":kms:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":alias/aws/s3",
                  ],
                ],
              },
            },
          },
          "Prefix": "twitter/",
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructTWITTERRawForTAFirehoseRoleEB1640D9",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "OrchestrationConstructTWITTERRawForTAKinesisFirehoseKinesisFirehosePolicy8191D081": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructS3Bucket2727DF68",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "OrchestrationConstructS3Bucket2727DF68",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "logs:PutLogEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:",
                    Object {
                      "Ref": "OrchestrationConstructTWITTERRawForTAKinesisFirehosefirehoseloggroupD86A6349",
                    },
                    ":log-stream:",
                    Object {
                      "Ref": "OrchestrationConstructTWITTERRawForTAKinesisFirehosefirehoseloggroupfirehoselogstream70339ABC",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTWITTERRawForTAKinesisFirehoseKinesisFirehosePolicy8191D081",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTWITTERRawForTAKinesisFirehoseKinesisFirehoseRoleB89EAC4F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTWITTERRawForTAKinesisFirehoseKinesisFirehoseRoleB89EAC4F": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructTWITTERRawForTAKinesisFirehosefirehoseloggroupD86A6349": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W86",
              "reason": "Retention period for CloudWatchLogs LogGroups are set to 'Never Expire' to preserve customer data indefinitely",
            },
            Object {
              "id": "W84",
              "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructTWITTERRawForTAKinesisFirehosefirehoseloggroupfirehoselogstream70339ABC": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LogGroupName": Object {
          "Ref": "OrchestrationConstructTWITTERRawForTAKinesisFirehosefirehoseloggroupD86A6349",
        },
      },
      "Type": "AWS::Logs::LogStream",
      "UpdateReplacePolicy": "Retain",
    },
    "OrchestrationConstructTextAnalysisLambdaStateMachineTaskD87DC9CC": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "State machine resource not available, hence defaulting to \\"*\\"",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "states:SendTaskSuccess",
                "states:sendTaskFailure",
                "states:SendTaskHeartbeat",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTextAnalysisLambdaStateMachineTaskD87DC9CC",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTextAnalysisTaskLambdaFunctionServiceRoleF3C02291",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTextAnalysisTaskLambdaFunctionDEF36561": Object {
      "DependsOn": Array [
        "OrchestrationConstructTextAnalysisTaskLambdaFunctionServiceRoleDefaultPolicy2664BA58",
        "OrchestrationConstructTextAnalysisTaskLambdaFunctionServiceRoleF3C02291",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameterse589d87abc8c6481eeb10fcba799165c929cbdc5dc76f82ef863098d17f50283S3Bucket720825A0",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameterse589d87abc8c6481eeb10fcba799165c929cbdc5dc76f82ef863098d17f50283S3VersionKeyFB2CADAD",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameterse589d87abc8c6481eeb10fcba799165c929cbdc5dc76f82ef863098d17f50283S3VersionKeyFB2CADAD",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "ReservedConcurrentExecutions": 15,
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructTextAnalysisTaskLambdaFunctionServiceRoleF3C02291",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructTextAnalysisTaskLambdaFunctionServiceRoleDefaultPolicy2664BA58": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTextAnalysisTaskqueueDF7049B0",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTextAnalysisTaskLambdaFunctionServiceRoleDefaultPolicy2664BA58",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTextAnalysisTaskLambdaFunctionServiceRoleF3C02291",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTextAnalysisTaskLambdaFunctionServiceRoleF3C02291": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructTextAnalysisTaskLambdaFunctionSqsEventSourceOrchestrationConstructTextAnalysisTaskqueue8C431D71CAE99670": Object {
      "Properties": Object {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructTextAnalysisTaskqueueDF7049B0",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "OrchestrationConstructTextAnalysisTaskLambdaFunctionDEF36561",
        },
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "OrchestrationConstructTextAnalysisTaskdeadLetterQueueAA58BD95": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestrationConstructTextAnalysisTaskdeadLetterQueuePolicy730FE874": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTextAnalysisTaskdeadLetterQueueAA58BD95",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTextAnalysisTaskdeadLetterQueueAA58BD95",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "OrchestrationConstructTextAnalysisTaskdeadLetterQueueAA58BD95",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "OrchestrationConstructTextAnalysisTaskqueueDF7049B0": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructTextAnalysisTaskdeadLetterQueueAA58BD95",
              "Arn",
            ],
          },
          "maxReceiveCount": 15,
        },
        "VisibilityTimeout": 3600,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestrationConstructTextAnalysisTaskqueuePolicy6CBE94D6": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTextAnalysisTaskqueueDF7049B0",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTextAnalysisTaskqueueDF7049B0",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "OrchestrationConstructTextAnalysisTaskqueueDF7049B0",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "OrchestrationConstructTextRekAnalyze15062BBD": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Rekognition services. The Rekognition services do not have a resource arn.
                        This permission is retricted to the lambda function responsible for accessing the Amazon Rekognition service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "rekognition:detectText",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTextRekAnalyze15062BBD",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructImageAnalysisTaskLambdaFunctionServiceRole9751CC46",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTranslateLambdaAED204A7": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "The * resource allows lambda function to access Amazon Translate services. The translate services do not have a resource arn.
                        This permission is retricted to the lambda function responsible for accessing the Amazon Translate service",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "translate:translateText",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "firehose:PutRecord",
                "firehose:PutRecordBatch",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructTWITTERRawForTAKinesisFirehose7EC25066",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehose020698CF",
                    "Arn",
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTranslateLambdaAED204A7",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTranslateTaskLambdaFunctionServiceRoleF1213170",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTranslateLambdaStateMachineTask4781921E": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "State machine resource not available, hence defaulting to \\"*\\"",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "states:SendTaskSuccess",
                "states:sendTaskFailure",
                "states:SendTaskHeartbeat",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTranslateLambdaStateMachineTask4781921E",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTranslateTaskLambdaFunctionServiceRoleF1213170",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTranslateTaskLambdaFunction88C60D75": Object {
      "DependsOn": Array [
        "OrchestrationConstructTranslateTaskLambdaFunctionServiceRoleDefaultPolicy8A260F88",
        "OrchestrationConstructTranslateTaskLambdaFunctionServiceRoleF1213170",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersd56c3099e4e60d9d1a202e4b121d2b1294e29acd329c59de6e16e9e95ae6b82fS3Bucket74BBF58E",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersd56c3099e4e60d9d1a202e4b121d2b1294e29acd329c59de6e16e9e95ae6b82fS3VersionKey5869DD4C",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersd56c3099e4e60d9d1a202e4b121d2b1294e29acd329c59de6e16e9e95ae6b82fS3VersionKey5869DD4C",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "KINESIS_FIREHOSE_FOR_NEWSFEEDS": Object {
              "Ref": "OrchestrationConstructNEWSFEEDSRawForTAKinesisFirehose020698CF",
            },
            "KINESIS_FIREHOSE_FOR_TWITTER": Object {
              "Ref": "OrchestrationConstructTWITTERRawForTAKinesisFirehose7EC25066",
            },
          },
        },
        "Handler": "index.handler",
        "ReservedConcurrentExecutions": 7,
        "Role": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructTranslateTaskLambdaFunctionServiceRoleF1213170",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OrchestrationConstructTranslateTaskLambdaFunctionServiceRoleDefaultPolicy8A260F88": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTranslateTaskqueueA95723A7",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OrchestrationConstructTranslateTaskLambdaFunctionServiceRoleDefaultPolicy8A260F88",
        "Roles": Array [
          Object {
            "Ref": "OrchestrationConstructTranslateTaskLambdaFunctionServiceRoleF1213170",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OrchestrationConstructTranslateTaskLambdaFunctionServiceRoleF1213170": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OrchestrationConstructTranslateTaskLambdaFunctionSqsEventSourceOrchestrationConstructTranslateTaskqueue010D1DDB1D774C1E": Object {
      "Properties": Object {
        "BatchSize": 1,
        "Enabled": true,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "OrchestrationConstructTranslateTaskqueueA95723A7",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "OrchestrationConstructTranslateTaskLambdaFunction88C60D75",
        },
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "OrchestrationConstructTranslateTaskdeadLetterQueue7F36E302": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestrationConstructTranslateTaskdeadLetterQueuePolicy44E11384": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTranslateTaskdeadLetterQueue7F36E302",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTranslateTaskdeadLetterQueue7F36E302",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "OrchestrationConstructTranslateTaskdeadLetterQueue7F36E302",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "OrchestrationConstructTranslateTaskqueueA95723A7": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsMasterKeyId": "alias/aws/sqs",
        "RedrivePolicy": Object {
          "deadLetterTargetArn": Object {
            "Fn::GetAtt": Array [
              "OrchestrationConstructTranslateTaskdeadLetterQueue7F36E302",
              "Arn",
            ],
          },
          "maxReceiveCount": 15,
        },
        "VisibilityTimeout": 36000,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "OrchestrationConstructTranslateTaskqueuePolicy1BB3190D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:RemovePermission",
                "sqs:AddPermission",
                "sqs:SetQueueAttributes",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTranslateTaskqueueA95723A7",
                  "Arn",
                ],
              },
              "Sid": "QueueOwnerOnlyAccess",
            },
            Object {
              "Action": "SQS:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "OrchestrationConstructTranslateTaskqueueA95723A7",
                  "Arn",
                ],
              },
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "OrchestrationConstructTranslateTaskqueueA95723A7",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "TestEventBus12626D66": Object {
      "Properties": Object {
        "Name": "TestEventBus",
      },
      "Type": "AWS::Events::EventBus",
    },
    "testFunction483F4CBE": Object {
      "DependsOn": Array [
        "testFunctionServiceRoleDefaultPolicy159F3A68",
        "testFunctionServiceRoleFEC29B6F",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926S3Bucket596D8E57",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926S3VersionKey20C99F97",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters02f024d167d4e73174b58eeae4676de5edde4cfc95046e7969572ca3ad52d926S3VersionKey20C99F97",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "STATE_MACHINE_ARN": Object {
              "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testFunctionServiceRoleFEC29B6F",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
      },
      "Type": "AWS::Lambda::Function",
    },
    "testFunctionServiceRoleDefaultPolicy159F3A68": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "OrchestrationConstructStateMachineWorkflowEngineStateMachineA5FF5C05",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testFunctionServiceRoleDefaultPolicy159F3A68",
        "Roles": Array [
          Object {
            "Ref": "testFunctionServiceRoleFEC29B6F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testFunctionServiceRoleFEC29B6F": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;
