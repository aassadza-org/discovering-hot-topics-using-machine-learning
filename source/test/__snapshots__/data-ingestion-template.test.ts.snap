// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`do not create SSM credential path entry 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0ArtifactHash61FD114B": Object {
      "Description": "Artifact hash for asset \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81": Object {
      "Description": "S3 bucket for asset \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA": Object {
      "Description": "S3 key for asset version \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "existingEventBus2F5875A1": Object {
      "Properties": Object {
        "Name": "testStackexistingEventBus7236155E",
      },
      "Type": "AWS::Events::EventBus",
    },
    "testCustomBusLambdaFunctionCAB66923": Object {
      "DependsOn": Array [
        "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8",
        "testCustomBusLambdaFunctionServiceRoleCE76F238",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENT_BUS_NAME": Object {
              "Ref": "existingEventBus2F5875A1",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testCustomBusLambdaFunctionServiceRoleCE76F238",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testCustomBusLambdaFunctionServiceRoleCE76F238": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "existingEventBus2F5875A1",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8",
        "Roles": Array [
          Object {
            "Ref": "testCustomBusLambdaFunctionServiceRoleCE76F238",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedEventsRuleB9F64B1F": Object {
      "Properties": Object {
        "EventBusName": Object {
          "Ref": "existingEventBus2F5875A1",
        },
        "EventPattern": Object {
          "account": Array [
            Object {
              "Ref": "AWS::AccountId",
            },
          ],
          "region": Array [
            Object {
              "Ref": "AWS::Region",
            },
          ],
          "source": Array [
            "test.fake.namespace",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90": Object {
      "DependsOn": Array [
        "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680",
        "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionAwsEventsLambdaInvokePermission159F3E98D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedEventsRuleB9F64B1F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680",
        "Roles": Array [
          Object {
            "Ref": "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;

exports[`do not create source dynamodb table 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0ArtifactHash61FD114B": Object {
      "Description": "Artifact hash for asset \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81": Object {
      "Description": "S3 bucket for asset \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA": Object {
      "Description": "S3 key for asset version \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "existingEventBus2F5875A1": Object {
      "Properties": Object {
        "Name": "testStackexistingEventBus7236155E",
      },
      "Type": "AWS::Events::EventBus",
    },
    "testCustomBusLambdaFunctionCAB66923": Object {
      "DependsOn": Array [
        "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8",
        "testCustomBusLambdaFunctionServiceRoleCE76F238",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENT_BUS_NAME": Object {
              "Ref": "existingEventBus2F5875A1",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testCustomBusLambdaFunctionServiceRoleCE76F238",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testCustomBusLambdaFunctionServiceRoleCE76F238": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "existingEventBus2F5875A1",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8",
        "Roles": Array [
          Object {
            "Ref": "testCustomBusLambdaFunctionServiceRoleCE76F238",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedEventsRuleB9F64B1F": Object {
      "Properties": Object {
        "EventBusName": Object {
          "Ref": "existingEventBus2F5875A1",
        },
        "EventPattern": Object {
          "account": Array [
            Object {
              "Ref": "AWS::AccountId",
            },
          ],
          "region": Array [
            Object {
              "Ref": "AWS::Region",
            },
          ],
          "source": Array [
            "test.fake.namespace",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90": Object {
      "DependsOn": Array [
        "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680",
        "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "TARGET_DDB_TABLE": Object {
              "Ref": "testCustomBusTargetDynamoTable4F158389",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionAwsEventsLambdaInvokePermission159F3E98D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedEventsRuleB9F64B1F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "ssm:GetParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parametertest/fakekey/fakepath",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "testCustomBusTargetDynamoTable4F158389",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680",
        "Roles": Array [
          Object {
            "Ref": "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testCustomBusTargetDynamoTable4F158389": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "CREATED_TIMESTAMP",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "CREATED_TIMESTAMP",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "SSEEnabled": true,
        },
        "TimeToLiveSpecification": Object {
          "AttributeName": "EXP_DATE",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
  },
}
`;

exports[`do not create target dynamodb table 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0ArtifactHash61FD114B": Object {
      "Description": "Artifact hash for asset \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81": Object {
      "Description": "S3 bucket for asset \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA": Object {
      "Description": "S3 key for asset version \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "existingEventBus2F5875A1": Object {
      "Properties": Object {
        "Name": "testStackexistingEventBus7236155E",
      },
      "Type": "AWS::Events::EventBus",
    },
    "testCustomBusLambdaFunctionCAB66923": Object {
      "DependsOn": Array [
        "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8",
        "testCustomBusLambdaFunctionServiceRoleCE76F238",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENT_BUS_NAME": Object {
              "Ref": "existingEventBus2F5875A1",
            },
            "SOURCE_DDB_TABLE": Object {
              "Ref": "testCustomBusSourceDynamoTableA58E4C27",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testCustomBusLambdaFunctionServiceRoleCE76F238",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testCustomBusLambdaFunctionServiceRoleCE76F238": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "testCustomBusSourceDynamoTableA58E4C27",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "existingEventBus2F5875A1",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8",
        "Roles": Array [
          Object {
            "Ref": "testCustomBusLambdaFunctionServiceRoleCE76F238",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedEventsRuleB9F64B1F": Object {
      "Properties": Object {
        "EventBusName": Object {
          "Ref": "existingEventBus2F5875A1",
        },
        "EventPattern": Object {
          "account": Array [
            Object {
              "Ref": "AWS::AccountId",
            },
          ],
          "region": Array [
            Object {
              "Ref": "AWS::Region",
            },
          ],
          "source": Array [
            "test.fake.namespace",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90": Object {
      "DependsOn": Array [
        "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680",
        "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionAwsEventsLambdaInvokePermission159F3E98D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedEventsRuleB9F64B1F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "ssm:GetParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parametertest/fakekey/fakepath",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680",
        "Roles": Array [
          Object {
            "Ref": "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testCustomBusSourceDynamoTableA58E4C27": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "SSEEnabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
  },
}
`;

exports[`fail when neither existing bus nor event bus properties are provided 1`] = `Object {}`;

exports[`test ingestion with all parameters and custom event bridge 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0ArtifactHash61FD114B": Object {
      "Description": "Artifact hash for asset \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81": Object {
      "Description": "S3 bucket for asset \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA": Object {
      "Description": "S3 key for asset version \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "testCustomBusIngestionBus2242DCDB": Object {
      "Properties": Object {
        "Name": "testBus",
      },
      "Type": "AWS::Events::EventBus",
    },
    "testCustomBusLambdaFunctionCAB66923": Object {
      "DependsOn": Array [
        "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8",
        "testCustomBusLambdaFunctionServiceRoleCE76F238",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENT_BUS_NAME": Object {
              "Ref": "testCustomBusIngestionBus2242DCDB",
            },
            "SOURCE_DDB_TABLE": Object {
              "Ref": "testCustomBusSourceDynamoTableA58E4C27",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testCustomBusLambdaFunctionServiceRoleCE76F238",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testCustomBusLambdaFunctionServiceRoleCE76F238": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "testCustomBusSourceDynamoTableA58E4C27",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "testCustomBusIngestionBus2242DCDB",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8",
        "Roles": Array [
          Object {
            "Ref": "testCustomBusLambdaFunctionServiceRoleCE76F238",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedEventsRuleB9F64B1F": Object {
      "Properties": Object {
        "EventBusName": Object {
          "Ref": "testCustomBusIngestionBus2242DCDB",
        },
        "EventPattern": Object {
          "account": Array [
            Object {
              "Ref": "AWS::AccountId",
            },
          ],
          "region": Array [
            Object {
              "Ref": "AWS::Region",
            },
          ],
          "source": Array [
            "test.fake.namespace",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90": Object {
      "DependsOn": Array [
        "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680",
        "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "TARGET_DDB_TABLE": Object {
              "Ref": "testCustomBusTargetDynamoTable4F158389",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionAwsEventsLambdaInvokePermission159F3E98D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedEventsRuleB9F64B1F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "ssm:GetParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parametertest/fakekey/fakepath",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "testCustomBusTargetDynamoTable4F158389",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680",
        "Roles": Array [
          Object {
            "Ref": "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testCustomBusSourceDynamoTableA58E4C27": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "SSEEnabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "testCustomBusTargetDynamoTable4F158389": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "CREATED_TIMESTAMP",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "CREATED_TIMESTAMP",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "SSEEnabled": true,
        },
        "TimeToLiveSpecification": Object {
          "AttributeName": "EXP_DATE",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
  },
}
`;

exports[`test ingestion with existing event bus 1`] = `
Object {
  "Parameters": Object {
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0ArtifactHash61FD114B": Object {
      "Description": "Artifact hash for asset \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81": Object {
      "Description": "S3 bucket for asset \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
    "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA": Object {
      "Description": "S3 key for asset version \\"264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "existingEventBus2F5875A1": Object {
      "Properties": Object {
        "Name": "testStackexistingEventBus7236155E",
      },
      "Type": "AWS::Events::EventBus",
    },
    "testCustomBusLambdaFunctionCAB66923": Object {
      "DependsOn": Array [
        "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8",
        "testCustomBusLambdaFunctionServiceRoleCE76F238",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "EVENT_BUS_NAME": Object {
              "Ref": "existingEventBus2F5875A1",
            },
            "SOURCE_DDB_TABLE": Object {
              "Ref": "testCustomBusSourceDynamoTableA58E4C27",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testCustomBusLambdaFunctionServiceRoleCE76F238",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testCustomBusLambdaFunctionServiceRoleCE76F238": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "testCustomBusSourceDynamoTableA58E4C27",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "existingEventBus2F5875A1",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testCustomBusLambdaFunctionServiceRoleDefaultPolicy9BAEE1C8",
        "Roles": Array [
          Object {
            "Ref": "testCustomBusLambdaFunctionServiceRoleCE76F238",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedEventsRuleB9F64B1F": Object {
      "Properties": Object {
        "EventBusName": Object {
          "Ref": "existingEventBus2F5875A1",
        },
        "EventPattern": Object {
          "account": Array [
            Object {
              "Ref": "AWS::AccountId",
            },
          ],
          "region": Array [
            Object {
              "Ref": "AWS::Region",
            },
          ],
          "source": Array [
            "test.fake.namespace",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90": Object {
      "DependsOn": Array [
        "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680",
        "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions.",
            },
            Object {
              "id": "W89",
              "reason": "This is not a rule for the general case, just for specific use cases/industries",
            },
            Object {
              "id": "W92",
              "reason": "Impossible for us to define the correct concurrency for clients",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3Bucket71199E81",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters264a554884ca03dba7dd0c9045b116252a9f53b56027cfd8b337d609b3e23fb0S3VersionKey7F9EA7BA",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "TARGET_DDB_TABLE": Object {
              "Ref": "testCustomBusTargetDynamoTable4F158389",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionAwsEventsLambdaInvokePermission159F3E98D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunction7E9BAC90",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedEventsRuleB9F64B1F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "ssm:GetParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parametertest/fakekey/fakepath",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "testCustomBusTargetDynamoTable4F158389",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRoleDefaultPolicyA41AA680",
        "Roles": Array [
          Object {
            "Ref": "testCustomBusRuleTargetLambdaRuleTargetLambdawrappedLambdaFunctionServiceRole93F1D949",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testCustomBusSourceDynamoTableA58E4C27": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "SSEEnabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "testCustomBusTargetDynamoTable4F158389": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "CREATED_TIMESTAMP",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "ACCOUNT_IDENTIFIER",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "CREATED_TIMESTAMP",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "SSEEnabled": true,
        },
        "TimeToLiveSpecification": Object {
          "AttributeName": "EXP_DATE",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
  },
}
`;
